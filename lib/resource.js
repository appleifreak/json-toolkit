// Generated by CoffeeScript 1.5.0

/*
# This file provides a basic JSON object handling
*/


(function() {
  var JSONResource, SRPClass, fs, json, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  json = require('../main');

  _ = require('underscore');

  fs = require('fs');

  SRPClass = require('./SRPClass');

  JSONResource = (function(_super) {

    __extends(JSONResource, _super);

    function JSONResource(v, options) {
      var do_ready,
        _this = this;
      this.options = _.defaults(options, {
        from_file: false,
        key_sep: ":",
        pretty_output: false,
        indent: "\t"
      });
      this.data = {};
      do_ready = _.once(function() {
        _this.isReady = true;
        return _this.emit("ready");
      });
      this.watching = {};
      this.on("change", function(key, val) {
        if (_.has(_this.watching, key)) {
          return _this.watching[key].call(null, key, val);
        }
      });
      if (!v) {
        do_ready();
      }
      if (_.isString(v) && this.options.from_file) {
        this.file = v;
        fs.exists(v, function(exists) {
          if (exists) {
            return _this.load(v, function(err) {
              if (err) {
                return _this.emit("error", err);
              } else {
                return do_ready();
              }
            });
          } else {
            return do_ready();
          }
        });
      } else {
        this.load(v);
        do_ready();
      }
    }

    JSONResource.prototype.get = function(key) {
      var current, failed, keys;
      if (!key) {
        return this.data;
      }
      if (_.isString(key)) {
        keys = this._sepPath(key);
      } else if (_.isArray(key) && key.length) {
        keys = key;
      } else {
        return this.emit("error", new Error("Expecting string or array."));
      }
      current = this.data;
      failed = _.find(_.initial(keys), function(item) {
        if (_.has(current, item)) {
          return !(current = current[item]);
        } else {
          return true;
        }
      });
      if (failed) {
        return void 0;
      } else {
        return current[_.last(keys)];
      }
    };

    JSONResource.prototype.set = function(key, val) {
      var current, failed, keys,
        _this = this;
      if (_.isString(key) && key) {
        keys = this._sepPath(key);
      } else if (_.isArray(key) && key.length) {
        keys = key;
      } else {
        return this.emit("error", new Error("Expecting string or array for key."));
      }
      current = this.data;
      failed = _.some(_.initial(keys), function(item) {
        if (!_.has(current, item)) {
          current[item] = {};
        }
        if (!_.isObject(current[item])) {
          _this.emit("error", new Error("The key `" + item + "` exists, but setting the value failed because it isn't a traversable object."));
          return true;
        }
        current = current[item];
        return false;
      });
      if (!failed) {
        current[_.last(keys)] = val;
        return this.emit("change", keys.join(this.options.key_sep), val);
      }
    };

    JSONResource.prototype.test = function(key, value) {
      var val;
      val = this.get(key);
      if (_.isString(value)) {
        return typeof val === value;
      } else if (_.isFunction(value)) {
        return value.call(null, val);
      } else if (_.isRegExp(value)) {
        return val.test(value);
      } else {
        return value === val;
      }
    };

    JSONResource.prototype.match = function(key) {
      var a, b, c, matches, one, reach, rmatch, s, stars, start, two, value, _ref,
        _this = this;
      stars = /([\\])?(\*\*?)/i;
      one = "([^" + this.options.key_sep + "]*)";
      two = "(.*)";
      matches = [];
      start = null;
      rmatch = function(str) {
        var a, b, c, m;
        m = stars.exec(str);
        if (!m) {
          return [str, "", ""];
        }
        a = str.slice(0, m.index);
        b = m[1] ? m[2] : m[2] === "*" ? one : m[2] === "**" ? two : m[0];
        c = rmatch(str.slice(m.index + m[0].length)).join("");
        return [a, b, c];
      };
      if (_.isString(key)) {
        _ref = rmatch(key), a = _ref[0], b = _ref[1], c = _ref[2];
        s = a.split(this.options.key_sep);
        start = _.initial(s).join(this.options.key_sep);
        key = new RegExp("^" + (_.last(s) + b + c) + "$");
      }
      if (!_.isRegExp(key)) {
        this.emit("error", new Error("Expecting string or regex."));
        return [];
      }
      reach = function(obj, base) {
        base = base ? base + _this.options.key_sep : "";
        return _.each(obj, function(v, k) {
          k = base + k;
          if (key.test(k)) {
            matches.push(k);
          }
          if (_.isObject(v)) {
            return reach(v, k);
          }
        });
      };
      value = this.get(start);
      if (_.isObject(value)) {
        reach(value);
      } else {
        matches = [""];
      }
      matches = _.map(matches, function(m) {
        return start + _this.options.key_sep + m;
      });
      return matches;
    };

    JSONResource.prototype.replace = function(key, val) {
      var _this = this;
      return this.each(key, function(x, k) {
        var v;
        if (_.isFunction(val)) {
          v = val(_this.get(k), k);
        } else {
          v = val;
        }
        return _this.set(k, v);
      });
    };

    JSONResource.prototype.each = function(key, cb) {
      var ms, _ref,
        _this = this;
      if (_.isFunction(key)) {
        _ref = [key, null], cb = _ref[0], key = _ref[1];
      }
      ms = this.match(key || "**");
      return _.each(ms, function(k) {
        return cb(_this.get(k), k, ms);
      });
    };

    JSONResource.prototype.watch = function(key, cb) {
      var keep, _ref;
      if (_.isFunction(key) && !cb) {
        _ref = [key, "**"], cb = _ref[0], key = _ref[1];
      }
      if (!(_.isFunction(cb) && _.isString(key))) {
        return;
      }
      keep = _.chain(this.match(key)).map(function(k) {
        return [k, cb];
      }).object().value();
      return _.extend(this.watching, keep);
    };

    JSONResource.prototype.find = function(val) {
      var key, _find,
        _this = this;
      key = null;
      _find = function(obj, base) {
        base = base ? base + _this.options.key_sep : "";
        return _.some(obj, function(item, k) {
          k = base + k;
          if (_.isEqual(val, item)) {
            return key = k;
          } else if (_.isObject(item)) {
            return _find(item, k);
          }
        });
      };
      _find(this.data);
      return key;
    };

    JSONResource.prototype.search = function(val) {
      var keys, _find,
        _this = this;
      keys = [];
      _find = function(obj, base) {
        base = base ? base + _this.options.key_sep : "";
        return _.each(obj, function(item, key) {
          key = base + key;
          if (_.isEqual(val, item)) {
            keys.push(key);
          }
          if (_.isObject(item)) {
            return _find(item, key);
          }
        });
      };
      _find(this.data);
      return keys;
    };

    JSONResource.prototype.load = function(data, cb) {
      var old,
        _this = this;
      old = this.toObject();
      if (_.isFunction(cb)) {
        return json.parseFile(data, function(err, obj) {
          if (err) {
            return cb(err);
          } else {
            _.extend(_this.data, obj);
            cb(null, old);
            return _this.emit("load", old);
          }
        });
      }
      try {
        if (_.isString(data)) {
          data = json.parse(data);
        }
        _.extend(this.data, data);
      } catch (e) {
        return this.emit("error", e);
      }
      this.emit("load", old);
      return old;
    };

    JSONResource.prototype.save = function(file, cb) {
      var indent, _ref,
        _this = this;
      if (_.isFunction(file)) {
        _ref = [file, this.file], cb = _ref[0], file = _ref[1];
      }
      if (!file) {
        file = this.file || null;
      }
      indent = this.options.pretty_output ? this.options.indent : null;
      return json.saveJSON(this.data, file, indent, function(err) {
        if (err) {
          if (cb) {
            return cb(err);
          } else {
            return _this.emit("error", err);
          }
        } else {
          _this.file = file;
          if (cb) {
            cb();
          }
          return _this.emit("save", file);
        }
      });
    };

    JSONResource.prototype.toPrettyString = function(indent) {
      if (indent == null) {
        indent = this.options.indent;
      }
      return json.prettify(this.data, indent);
    };

    JSONResource.prototype.toString = function() {
      return json.stringify(this.data);
    };

    JSONResource.prototype.toJSON = function() {
      return this.toObject();
    };

    JSONResource.prototype.toObject = function() {
      return _.clone(this.data);
    };

    JSONResource.prototype._sepPath = function(p) {
      return _.compact(p.split(this.options.key_sep));
    };

    return JSONResource;

  })(SRPClass);

  module.exports = JSONResource;

}).call(this);
